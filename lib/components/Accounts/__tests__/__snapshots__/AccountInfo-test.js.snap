// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AccountInfo Component renders a connected AccountInfo as expected 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AccountInfo
    address="0x9df0e9759b17f34e9123adbe6d3f25d54b72ad6a"
    balance={0}
    explorerUrl={undefined}
    hexaddress={undefined}
    navigator={
      FakeNavigator {
        "event": [Function],
      }
    }
    network={undefined}
    refreshBalance={[Function]}
    usdBalance={0}
    working={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <AccountTile
        accountProfile={undefined}
        balance={0}
        buttonIcon="plus-square"
        network={undefined}
        tileButton={[Function]}
        usdBalance={0}
      />,
      "contentContainerStyle": Object {
        "alignItems": "center",
        "backgroundColor": "#FFFFFF",
        "flex": 1,
        "padding": 30,
      },
      "refreshControl": <RefreshControlMock
        onRefresh={[Function]}
        refreshing={false}
      />,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "accountProfile": undefined,
        "balance": 0,
        "buttonIcon": "plus-square",
        "network": undefined,
        "tileButton": [Function],
        "usdBalance": 0,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "children": <AccountTile
              accountProfile={undefined}
              balance={0}
              buttonIcon="plus-square"
              network={undefined}
              tileButton={[Function]}
              usdBalance={undefined}
            />,
            "contentContainerStyle": Object {
              "alignItems": "center",
              "backgroundColor": "#FFFFFF",
              "flex": 1,
              "padding": 30,
            },
            "refreshControl": <RefreshControlMock
              onRefresh={[Function]}
              refreshing={false}
            />,
          },
          Object {},
        ],
      ],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <AccountTile
          accountProfile={undefined}
          balance={0}
          buttonIcon="plus-square"
          network={undefined}
          tileButton={[Function]}
          usdBalance={0}
        />,
        "contentContainerStyle": Object {
          "alignItems": "center",
          "backgroundColor": "#FFFFFF",
          "flex": 1,
          "padding": 30,
        },
        "refreshControl": <RefreshControlMock
          onRefresh={[Function]}
          refreshing={false}
        />,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "accountProfile": undefined,
          "balance": 0,
          "buttonIcon": "plus-square",
          "network": undefined,
          "tileButton": [Function],
          "usdBalance": 0,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "children": <AccountTile
                accountProfile={undefined}
                balance={0}
                buttonIcon="plus-square"
                network={undefined}
                tileButton={[Function]}
                usdBalance={undefined}
              />,
              "contentContainerStyle": Object {
                "alignItems": "center",
                "backgroundColor": "#FFFFFF",
                "flex": 1,
                "padding": 30,
              },
              "refreshControl": <RefreshControlMock
                onRefresh={[Function]}
                refreshing={false}
              />,
            },
            Object {},
          ],
        ],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "context": Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
  },
}
`;

exports[`AccountInfo Component renders info correctly 1`] = `
<RCTScrollView
  contentContainerStyle={
    Object {
      "alignItems": "center",
      "backgroundColor": "#FFFFFF",
      "flex": 1,
      "padding": 30,
    }
  }
  refreshControl={
    <RefreshControlMock
      onRefresh={[Function]}
      refreshing={false}
    />
  }
>
  <RCTRefreshControl />
  <View>
    <View
      elevation={10}
      style={
        Object {
          "alignSelf": "center",
          "backgroundColor": "white",
          "borderRadius": 16,
          "borderTopWidth": 0,
          "elevation": 10,
          "flexDirection": "column",
          "height": 320.15999999999997,
          "marginTop": 5,
          "overflow": "visible",
          "paddingLeft": 24.75,
          "paddingRight": 24.75,
          "paddingTop": 44.022000000000006,
          "shadowColor": "rgb(33, 21, 100)",
          "shadowOffset": Object {
            "height": 2,
            "width": 0,
          },
          "shadowOpacity": 0.1,
          "shadowRadius": 16,
          "width": 697.5,
          "zIndex": 10,
        }
      }
    >
      <View
        style={
          Object {
            "flexDirection": "row",
            "height": 133.4,
          }
        }
      >
        <View>
          <View
            style={
              Array [
                Object {
                  "alignItems": "center",
                  "flex": 0,
                  "justifyContent": "center",
                },
                Object {
                  "backgroundColor": "white",
                  "borderRadius": 30,
                  "height": 120,
                  "width": 120,
                },
              ]
            }
          >
            <Image
              resizeMode="cover"
              source={
                Object {
                  "testUri": "../../../assets/images/eth-symbol2.png",
                }
              }
              style={
                Array [
                  Object {
                    "borderRadius": 30,
                    "height": 120,
                    "width": 120,
                  },
                  Object {
                    "position": "absolute",
                  },
                  Array [
                    Object {
                      "borderRadius": 30,
                      "height": 120,
                      "width": 120,
                    },
                    undefined,
                  ],
                ]
              }
            />
          </View>
        </View>
        <View
          style={
            Object {
              "alignItems": "flex-end",
              "flex": 1,
              "paddingTop": 24.011999999999997,
            }
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "fontSize": 52.50000000000001,
              }
            }
          >
             
            0
             ETH 
          </Text>
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
          >
             
            $0
             
          </Text>
        </View>
      </View>
      <View
        style={
          Object {
            "alignItems": "center",
            "flex": 0,
            "flexDirection": "row",
            "height": 133.4,
            "justifyContent": "space-between",
          }
        }
      >
        <View>
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "fontSize": 37.5,
              }
            }
          >
            Ethereum Account
          </Text>
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
          >
             
             
          </Text>
        </View>
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          collapsable={undefined}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "borderRadius": 4,
              "borderWidth": 0.5,
              "flexDirection": "row",
              "opacity": 1,
              "padding": 5,
              "shadowColor": "rgb(23, 3, 64)",
              "shadowOffset": Object {
                "height": 4,
                "width": 0,
              },
              "shadowOpacity": 0.2,
              "shadowRadius": 12,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <Text
            accessible={true}
            allowFontScaling={false}
            ellipsizeMode="tail"
            style={
              Array [
                Object {
                  "color": "rgba(0,0,0,0.7)",
                  "fontSize": 26.68,
                },
                undefined,
                Object {
                  "fontFamily": "Feather",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
              ]
            }
          >
            
          </Text>
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "fontSize": 22.5,
                "marginLeft": 8,
              }
            }
          >
             ADD FUNDS 
          </Text>
        </View>
      </View>
    </View>
  </View>
</RCTScrollView>
`;

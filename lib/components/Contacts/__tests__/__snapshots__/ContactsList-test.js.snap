// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ContactsList renders ContactsList screen 1`] = `
<View
  style={
    Object {
      "backgroundColor": "rgba(246,247,248,1)",
      "flex": 1,
    }
  }
>
  <RCTScrollView
    data={
      Array [
        Object {
          "address": "0x1bc5cbf71b068642fc5e89c5e3d0bdb3e366bc02",
          "avatar": Object {},
          "name": "Testy McTesterson",
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    invertStickyHeaders={undefined}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "backgroundColor": "#ffffff",
      }
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "backgroundColor": "#FFFFFF",
                "borderBottomWidth": 0.5,
                "borderColor": "rgba(216,216,216,1)",
                "flexDirection": "row",
                "justifyContent": "space-between",
                "padding": 15,
              },
            ]
          }
        >
          <View>
            <View
              style={
                Array [
                  Object {
                    "alignItems": "center",
                    "flex": 0,
                    "justifyContent": "center",
                  },
                  Object {
                    "backgroundColor": "white",
                    "borderRadius": 30,
                    "height": 40,
                    "width": 40,
                  },
                ]
              }
            >
              <Image
                resizeMode="cover"
                source={Object {}}
                style={
                  Array [
                    Object {
                      "borderRadius": 30,
                      "height": 40,
                      "width": 40,
                    },
                    Object {
                      "position": "absolute",
                    },
                    Array [
                      Object {
                        "borderRadius": 30,
                        "height": 40,
                        "width": 40,
                      },
                      undefined,
                    ],
                  ]
                }
              />
            </View>
          </View>
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Array [
                Object {
                  "color": "rgba(74,74,74,1)",
                  "fontSize": 14,
                  "lineHeight": 22,
                },
                Object {
                  "flex": 1,
                  "marginLeft": 19,
                },
              ]
            }
          >
            Testy McTesterson
          </Text>
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;

exports[`ContactsList renders a connected ContactsList as expected 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ContactsList
    address="0x9df0e9759b17f34e9123adbe6d3f25d54b72ad6a"
    balance={0}
    connections={Array []}
    dispatch={[Function]}
    hexaddress="0x9df0e9759b17f34e9123adbe6d3f25d54b72ad6a"
    navigator={
      FakeNavigator {
        "event": [Function],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <FlatList
        data={Array []}
        disableVirtualization={false}
        horizontal={false}
        initialNumToRender={10}
        keyExtractor={[Function]}
        maxToRenderPerBatch={10}
        numColumns={1}
        onEndReachedThreshold={2}
        renderItem={[Function]}
        scrollEventThrottle={50}
        style={
          Object {
            "backgroundColor": "#ffffff",
          }
        }
        updateCellsBatchingPeriod={50}
        windowSize={21}
      />,
      "style": Object {
        "backgroundColor": "rgba(246,247,248,1)",
        "flex": 1,
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "data": Array [],
        "disableVirtualization": false,
        "horizontal": false,
        "initialNumToRender": 10,
        "keyExtractor": [Function],
        "maxToRenderPerBatch": 10,
        "numColumns": 1,
        "onEndReachedThreshold": 2,
        "renderItem": [Function],
        "scrollEventThrottle": 50,
        "style": Object {
          "backgroundColor": "#ffffff",
        },
        "updateCellsBatchingPeriod": 50,
        "windowSize": 21,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <FlatList
          data={Array []}
          disableVirtualization={false}
          horizontal={false}
          initialNumToRender={10}
          keyExtractor={[Function]}
          maxToRenderPerBatch={10}
          numColumns={1}
          onEndReachedThreshold={2}
          renderItem={[Function]}
          scrollEventThrottle={50}
          style={
            Object {
              "backgroundColor": "#ffffff",
            }
          }
          updateCellsBatchingPeriod={50}
          windowSize={21}
        />,
        "style": Object {
          "backgroundColor": "rgba(246,247,248,1)",
          "flex": 1,
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "data": Array [],
          "disableVirtualization": false,
          "horizontal": false,
          "initialNumToRender": 10,
          "keyExtractor": [Function],
          "maxToRenderPerBatch": 10,
          "numColumns": 1,
          "onEndReachedThreshold": 2,
          "renderItem": [Function],
          "scrollEventThrottle": 50,
          "style": Object {
            "backgroundColor": "#ffffff",
          },
          "updateCellsBatchingPeriod": 50,
          "windowSize": 21,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "context": Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
  },
}
`;

exports[`ContactsList renders an empty ContactsList screen 1`] = `
<View
  style={
    Object {
      "backgroundColor": "rgba(246,247,248,1)",
      "flex": 1,
    }
  }
>
  <RCTScrollView
    data={Array []}
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    invertStickyHeaders={undefined}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "backgroundColor": "#ffffff",
      }
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View />
  </RCTScrollView>
</View>
`;
